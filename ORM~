#!/usr/bin/python3.5

class Feild(object):

    def __init__(self, name, column_type, primary_key, default):
        self.name		= name
        self.column_type	= column_type
        self.primary_key	= primary_key
        self.default		= default

    def __str__(self):
        return '%s,%s:%s' % (self.__class__.__name__, self.column_type, self.name)


class StringFeild(Feild):

    def __init__(self, ddl='varchar(100)', name=None, primary_key=False, default=None):
        super().__init__(name, ddl, primary_key, default)


class ModelMetaClass(type):

    def __new__(cls, name, bases, attrs):
        if name=='Model':
            return type.__new__(cls, name, bases, attrs)

        tableName	= attrs.get('__table__', None) or name
        print("found table name : %s" % tableName)

        mappings	= {}
        feilds		= []
        primary_key	= None
        for key, value in attrs.items():
            if isinstance(value, Feild):
                print("found Feild : %s" % value.name)
                mappings[key] = value
                if value.primary_key:
                    if primary_key:
                        raise RuntimeError('Duplicate primary key for fieild : %s' & key)
                    primary_key = key
                else:
                    feilds.append(key)

        if not primary_key:
            raise RuntimeError('primary key not found')

        for key in mappings:
            attrs.pop(key)

        escaped_feilds			= list(map(lambda f : '`%s`' % f, feilds))
        attrs['__table__']		= tableName
        attrs['__mappings__']		= mappings
        attrs['__feilds__']		= feilds
        attrs['__primary_key__']	= primary_key       

        return type.__new__(cls, name, bases, attrs)

print(__name__)
'''
class users(metaclass=ModelMetaClass):
    __table__ = 'users'
    
    name	= StringFeild(name='name', ddl='varchar(50)', primary_key=True)
    country	= StringFeild(name='country', ddl='varchar(100)')

user = users()
print("table : ")
print(user.__table__)
print("mappings : ")
print(user.__mappings__)
print("feilds : ")
print(user.__feilds__)
print("primaryKey : ")
print(user.__primary_key__)
'''
